mads 1.9.9 build 28 (14 Jan 15)
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
     1
     2 				//---------------------------------------------------------------------
     3 				// CHAR ENGINE 1x BUFFER EXAMPLE
     4 				//---------------------------------------------------------------------
     5
     6 = 0000				pmg = $0
     7
     8 					icl 'atari.hea'
Source: d:\!atari\macro\atari.hea
     1
     2 				.enum	@dmactl
     3 = 0000				blank	= %00
     4 = 0001				narrow	= %01
     5 = 0002				standard= %10
     6 = 0003				wide	= %11
     7 = 0004				missiles= %100
     8 = 0008				players	= %1000
     9 = 0010				lineX1	= %10000
    10 = 0000				lineX2	= %00000
    11 = 0020				dma	= %100000
    12 				.ende
    13
    14 = 003F			scr48	= @dmactl(wide|dma|players|missiles|lineX1)		;screen 48b
    15 = 003E			scr40	= @dmactl(standard|dma|players|missiles|lineX1)		;screen 40b
    16 = 003D			scr32	= @dmactl(narrow|dma|players|missiles|lineX1)		;screen 32b
    17
    18 				.enum	@pmcntl
    19 = 0001				missiles= %1
    20 = 0002				players	= %10
    21 = 0004				trigs	= %100
    22 				.ende
    23
    24 				.enum	@gtictl
    25 = 0000				prior0	= %0
    26 = 0001				prior1	= %1
    27 = 0002				prior2	= %10
    28 = 0004				prior4	= %100
    29 = 0008				prior8	= %1000
    30 = 0010				ply5	= %10000	; Fifth Player Enable
    31 = 0020				mlc	= %100000	; Multiple Color Player Enable
    32 = 0040				mode9	= %01000000
    33 = 0080				mode10	= %10000000
    34 = 00C0				mode11	= %11000000
    35 				.ende
    36
    37
    38 				* ---------------------------------------------------------------------------------------------
    39 				* ---	OS
    40 				* ---------------------------------------------------------------------------------------------
    41
    42 = 0052			lmargin	= $52
    43 = 0053			rmargin	= $53
    44 = 0054			rowcrs	= $54
    45 = 0055			colcrs	= $55
    46
    47 = E45C			setvbv	= $e45c
    48 = E462			xitvbv	= $e462
    49
    50 				* ---------------------------------------------------------------------------------------------
    51 				* ---	KEY ($d209)
    52 				* ---------------------------------------------------------------------------------------------
    53 = 001C			key_esc		= 28
    54 = 0021			key_space	= 33
    55 = 0010			key_v		= 16
    56 = 0015			key_b		= 21
    57 = 0023			key_n		= 35
    58 = 0025			key_m		= 37
    59
    60 				* ---------------------------------------------------------------------------------------------
    61 				* ---	GTIA
    62 				* ---------------------------------------------------------------------------------------------
    63
    64 = D000			hposp0	=	$D000		; pozioma pozycja gracza 0 (Z)
    65 = D001			hposp1	=	$D001		; pozioma pozycja gracza 1 (Z)
    66 = D002			hposp2	=	$D002		; pozioma pozycja gracza 2 (Z)
    67 = D003			hposp3	=	$D003		; pozioma pozycja gracza 3 (Z)
    68 = D004			hposm0	=	$D004		; pozioma pozycja pocisku 0 (Z)
    69 = D005			hposm1	=	$D005		; pozioma pozycja pocisku 1 (Z)
    70 = D006			hposm2	=	$D006		; pozioma pozycja pocisku 2 (Z)
    71 = D007			hposm3	=	$D007		; pozioma pozycja pocisku 3 (Z)
    72 = D008			sizep0	=	$D008		; poziomy rozmiar gracza 0 (Z)
    73 = D009			sizep1	=	$D009		; poziomy rozmiar gracza 1 (Z)
    74 = D00A			sizep2	=	$D00A		; poziomy rozmiar gracza 2 (Z)
    75 = D00B			sizep3	=	$D00B		; poziomy rozmiar gracza 3 (Z)
    76 = D00C			sizem	=	$D00C		; poziomy rozmiar pocisków (Z)
    77 = D00D			grafp0	=	$D00D		; rejestr grafiki gracza 0 (Z)
    78 = D00E			grafp1	=	$D00E		; rejestr grafiki gracza 1 (Z)
    79 = D00F			grafp2	=	$D00F		; rejestr grafiki gracza 2 (Z)
    80 = D010			grafp3	=	$D010		; rejestr grafiki gracza 3 (Z)
    81 = D011			grafm	=	$D011		; rejestr grafiki pocisków (Z)
    82 = D012			colpm0	=	$D012		; rejestr koloru gracza i pocisku 0 (Z)
    83 = D013			colpm1	=	$D013		; rejestr koloru gracza i pocisku 1 (Z)
    84 = D014			colpm2	=	$D014		; rejestr koloru gracza i pocisku 2 (Z)
    85 = D015			colpm3	=	$D015		; rejestr koloru gracza i pocisku 3 (Z)
    86 = D016			colpf0	=	$D016		; rejestr koloru pola gry 0 (Z)
    87 = D017			colpf1	=	$D017		; rejestr koloru pola gry 1 (Z)
    88 = D018			colpf2	=	$D018		; rejestr koloru pola gry 2 (Z)
    89 = D019			colpf3	=	$D019		; rejestr koloru pola gry 3 (Z)
    90 = D01A			colbak	=	$D01A		; rejestr koloru t³a (Z)
    91
    92 = D016			color0	=	colpf0
    93 = D017			color1	=	colpf1
    94 = D018			color2	=	colpf2
    95 = D019			color3	=	colpf3
    96
    97 = D000			kolm0pf	=	$D000		; kolizja pocisku 0 z polem gry (O)
    98 = D001			kolm1pf	=	$D001		; kolizja pocisku 1 z polem gry (O)
    99 = D002			kolm2pf	=	$D002		; kolizja pocisku 2 z polem gry (O)
   100 = D003			kolm3pf	=	$D003		; kolizja pocisku 3 z polem gry (O)
   101 = D004			kolp0pf	=	$D004		; kolizja gracza 0 z polem gry (O)
   102 = D005			kolp1pf	=	$D005		; kolizja gracza 1 z polem gry (O)
   103 = D006			kolp2pf	=	$D006		; kolizja gracza 2 z polem gry (O)
   104 = D007			kolp3pf	=	$D007		; kolizja gracza 3 z polem gry (O)
   105 = D008			kolm0p	=	$D008		; kolizja pocisku 0 z graczem (O)
   106 = D009			kolm1p	=	$D009		; kolizja pocisku 1 z graczem (O)
   107 = D00A			kolm2p	=	$D00A		; kolizja pocisku 2 z graczem (O)
   108 = D00B			kolm3p	=	$D00B		; kolizja pocisku 3 z graczem (O)
   109 = D00C			kolp0p	=	$D00C		; kolizja gracza 0 z innym graczem (O)
   110 = D00D			kolp1p	=	$D00D		; kolizja gracza 1 z innym graczem (O)
   111 = D00E			kolp2p	=	$D00E		; kolizja gracza 2 z innym graczem (O)
   112 = D00F			kolp3p	=	$D00F		; kolizja gracza 3 z innym graczem (O)
   113 = D010			trig0	=	$D010		; stan przycisku joysticka 0 (O)
   114 = D011			trig1	=	$D011		; stan przycisku joysticka 1 (O)
   115 = D013			trig3	=	$D013		; znacznik do³¹czenia cartridge-a (O)
   116 = D014			pal	=	$D014		; znacznik systemu TV (O)
   117
   118 = D01B			gtictl	=	$D01B		; rejestr kontroli uk³adu GTIA
   119 = D01B			gtiactl	=	gtictl
   120
   121 = D01C			vdelay	=	$D01C		; licznik opóŸnienia pionowego P/MG
   122 = D01D			pmcntl	=	$D01D		; rejestr kontroli graczy i pocisków
   123 = D01E			hitclr	=	$D01E		; rejestr kasowania rejestrów kolizji
   124 = D01F			consol	=	$D01F		; rejestr stanu klawiszy konsoli
   125
   126 				* ---------------------------------------------------------------------------------------------
   127 				* ---	POKEY
   128 				* ---------------------------------------------------------------------------------------------
   129
   130 = 0010			irqens	=	$0010		; rejestr-cieñ IRQEN
   131 = 0011			irqstat	=	$0011		; rejestr-cieñ IRQST
   132
   133 = D200			audf1	=	$d200		; czêstotliwoœæ pracy generatora 1 (Z)
   134 = D201			audc1	=	$d201		; rejestr kontroli dŸwiêku generatora 1 (Z)
   135 = D202			audf2	=	$d202		; czêstotliwoœæ pracy generatora 2 (Z)
   136 = D203			audc2	=	$d203		; rejestr kontroli dŸwiêku generatora 2 (Z)
   137 = D204			audf3	=	$d204		; czêstotliwoœæ pracy generatora 3 (Z)
   138 = D205			audc3	=	$d205		; rejestr kontroli dŸwiêku generatora 3 (Z)
   139 = D206			audf4	=	$d206		; czêstotliwoœæ pracy generatora 4 (Z)
   140 = D207			audc4	=	$d207		; rejestr kontroli dŸwiêku generatora 4 (Z)
   141
   142 = D208			audctl	=	$D208		; rejestr kontroli generatorów dŸwiêku (Z)
   143 = D209			stimer	=	$D209		; rejestr zerowania liczników (Z)
   144 = D209			kbcode	=	$D209		; kod ostatnio naciœniêtego klawisza (O)
   145 = D20A			skstres	=	$D20A		; rejestr statusu z³¹cza szeregowego (Z)
   146 = D20A			random	=	$D20A		; rejestr liczby losowej (O)
   147 = D20D			serout	=	$D20D		; szeregowy rejestr wyjœciowy (Z)
   148 = D20D			serin	=	$D20D		; szeregowy rejestr wejœciowy (O)
   149 = D20E			irqen	=	$D20E		; zezwolenie przerwañ IRQ (Z)
   150 = D20E			irqst	=	$D20E		; status przerwañ IRQ (O)
   151 = D20F			skctl	=	$D20F		; rejestr kontroli z³¹cza szeregowego (Z)
   152 = D20F			skstat	=	$D20F		; rejestr statusu z³¹cza szeregowego (O)
   153
   154 				* ---------------------------------------------------------------------------------------------
   155 				* ---	PIA
   156 				* ---------------------------------------------------------------------------------------------
   157
   158 = D300			porta	=	$D300		; port A uk³adu PIA
   159 = D301			portb	=	$D301		; port B uk³adu PIA
   160 = D302			pactl	=	$D302		; rejestr kontroli portu A
   161 = D303			pbctl	=	$D303		; rejestr kontroli portu B
   162
   163 				* ---------------------------------------------------------------------------------------------
   164 				* ---	ANTIC
   165 				* ---------------------------------------------------------------------------------------------
   166
   167 = D400			dmactl	=	$D400		; rejestr kontroli dostêpu do pamiêci
   168 = D401			chrctl	=	$D401		; rejestr kontroli wyœwietlania znaków
   169 = D402			dlptr	=	$D402		; adres programu ANTIC-a
   170 = D404			hscrol	=	$D404		; znacznik poziomego przesuwu obrazu
   171 = D405			vscrol	=	$D405		; znacznik pionowego przesuwu obrazu
   172 = D407			pmbase	=	$D407		; adres pamiêci graczy i pocisków
   173 = D409			chbase	=	$D409		; adres zestawu znaków
   174 = D40A			wsync	=	$D40A		; znacznik oczekiwania na synchronizacjê poziom¹
   175 = D40B			vcount	=	$D40B		; licznik linii obrazu
   176 = D40C			lpenh	=	$D40C		; poziome po³o¿enie pióra œwietlengo
   177 = D40D			lpenv	=	$D40D		; pionowe po³o¿enie pióra œwietlnego
   178 = D40E			nmien	=	$D40E		; rejestr zezwoleñ na przerwania NMI
   179 = D40F			nmist	=	$D40F		; rejestr statusu przerwañ NMI
   180
   181 				* ---------------------------------------------------------------------------------------------
   182 				* ---	OS
   183 				* ---------------------------------------------------------------------------------------------
   184
   185 = 02C4			colpf0s	=	$02C4		; rejestr-cieñ COLPF0
   186 = 02C5			colpf1s	=	$02C5		; rejestr-cieñ COLPF1
   187 = 02C6			colpf2s	=	$02C6		; rejestr-cieñ COLPF2
   188 = 02C7			colpf3s	=	$02C7		; rejestr-cieñ COLPF3
   189 = 02C8			colbaks	=	$02C8		; rejestr-cieñ COLBAK
   190
   191 				* ---------------------------------------------------------------------------------------------
   192 				* ---	HARDWARE
   193 				* ---------------------------------------------------------------------------------------------
   194
   195 = FFFA			nmivec	=	$FFFA		; wektor przerwania NMI
   196 = FFFC			resetvec=	$FFFC		; wektor przerwania RESET
   197 = FFFE			irqvec	=	$FFFE		; wektor przerwania IRQ
     9
    10 					icl 'CharEngine_1xBuf\Engine_1xBuf.hea'
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf\Engine_1xBuf.hea
     1
     2 = 0030			PlayfieldWidth	= 40+8
     3 = 0018			PlayfieldHeight	= 24
     4
     5 					ert PlayfieldWidth-8>40||PlayfieldHeight>24
     6
     7 = D800			PlayfieldBuf	= $d800		; !!! od pocz¹tku strony pamiêci
     8
     9 = C000			Charset0	= $c000
    10 = C400			Charset1	= $c400
    11 = C800			Charset2	= $c800
    12 = CC00			Charset3	= $cc00
    13
    14 = E000			Charset4	= $e000
    15 = E400			Charset5	= $e400	
    16 = E800			Charset6	= $e800
    17 = EC00			Charset7	= $ec00		; znak $7f nie jest u¿ywany dziêki czemu obszar $fff8..$ffff jest bezpieczny
    18
    19 = F000			Charset8	= $f000
    20 = F400			Charset9	= $f400
    21 = F800			Charset10	= $f800
    22 = FC00			Charset11	= $fc00
    11
    12 				//---------------------------------------------------------------------
    13
    14 					org $80
    15
    16 = 0080			zp	.ds 36
    17 = 00A4			regA	.ds 1
    18 = 00A5			regX	.ds 1
    19 = 00A6			regY	.ds 1
    20
    21 					.print 'ZP: $0080..',*-1
    21 				ZP: $0080..$00A6
    22
    23 				//---------------------------------------------------------------------
    24
    25 					org $1000
    26
    27 				.macro	@DLIST
    28 					dta d'pp',$70+$80
    29 					dta $44+$80,a(:1)
    30 					:PlayfieldHeight-2 dta $44+$80,a(:1+#*[PlayfieldWidth]+PlayfieldWidth)
    31 					dta $44,a(:1+[PlayfieldHeight-1]*[PlayfieldWidth])
    32 					dta $41,a(:2)
    33 				.endm
    34
    35 1000			dlist0	@DLIST PlayfieldBuf+4*PlayfieldWidth+4, dlist0
Macro: @DLIST [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
     1 FFFF> 1000-104D> 70 70 + 	dta d'pp',$70+$80
     2 1003 C4 C4 D8			dta $44+$80,a(PLAYFIELDBUF+4*PLAYFIELDWIDTH+4)
     3 1006 C4 F4 D8 C4 24 D9 + 	:PlayfieldHeight-2 dta $44+$80,a(PLAYFIELDBUF+4*PLAYFIELDWIDTH+4+#*[PlayfieldWidth]+PlayfieldWidth)
     4 1048 44 14 DD			dta $44,a(PLAYFIELDBUF+4*PLAYFIELDWIDTH+4+[PlayfieldHeight-1]*[PlayfieldWidth])
     5 104B 41 00 10			dta $41,a(DLIST0)
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
    36
    37
    38 104E				.align
    39
    40 1100-111F> 00 00 00 00		:4 brk
    41 1104			Charsets
    42 1104 C0				dta	>Charset0	; row #0
    43 1105 C4				dta	>Charset1	; row #1
    44 1106 C8				dta	>Charset2	; row #2
    45 1107 CC				dta	>Charset3	; row #3
    46 1108 E0				dta	>Charset4	; row #4
    47 1109 E4				dta	>Charset5	; row #5
    48 110A E8				dta	>Charset6	; row #6
    49 110B EC				dta	>Charset7	; row #7
    50 110C F0				dta	>Charset8	; row #8
    51 110D F4				dta	>Charset9	; row #9
    52 110E F8				dta	>Charset10	; row #10
    53 110F FC				dta	>Charset11	; row #11
    54
    55 1110 C0				dta	>Charset0	; row #12
    56 1111 C4				dta	>Charset1	; row #13
    57 1112 C8				dta	>Charset2	; row #14
    58 1113 CC				dta	>Charset3	; row #15
    59 1114 E0				dta	>Charset4	; row #16
    60 1115 E4				dta	>Charset5	; row #17
    61 1116 E8				dta	>Charset6	; row #18
    62 1117 EC				dta	>Charset7	; row #19
    63 1118 F0				dta	>Charset8	; row #20
    64 1119 F4				dta	>Charset9	; row #21
    65 111A F8				dta	>Charset10	; row #22
    66 111B FC				dta	>Charset11	; row #23
    67
    68 111C 00 00 00 00			:4 brk
    69
    70 1120				.align
    71 1200-1217> 00 00 00 00 + tColor1 :PlayfieldHeight dta $00	; maksymalnie 256 wpisów
    72
    73 1218				.align
    74 1300-1317> 1A 1A 1A 1A + tColor2 :PlayfieldHeight dta $1a	; maksymalnie 256 wpisów
    75
    76 1318				.align
    77 1400-16B8> F6 F6 F6 F6 + tColor3 :PlayfieldHeight dta $f6	; maksymalnie 256 wpisów
    78
    79
    80 1418 00			cloc		.byte
    81 1419 00 10		dlist		.word dlist0
    82
    83 141B 00 12		tColor1Addr	.word tColor1		; mo¿liwoœæ przemieszczania adresu w przypadku scrolla pionowego
    84 141D 00 13		tColor2Addr	.word tColor2		; mo¿liwoœæ przemieszczania adresu w przypadku scrolla pionowego
    85 141F 00 14		tColor3Addr	.word tColor3		; mo¿liwoœæ przemieszczania adresu w przypadku scrolla pionowego
    86
    87 				//---------------------------------------------------------------------
    88
    89 1421 A5 14 C5 14 F0 FC	main	lda:cmp:req 20
    90
    91 1427 78				sei
    92 1428 A9 00 8D 0E D4		mva #0 $d40e
    93 142D 8D 00 D4			sta $d400
    94
    95 1430 A9 FE 8D 01 D3		mva #$fe $d301
    96
    97 1435 A9 03 8D 1D D0		mva #3 $d01d
    98 143A A9 00 8D 07 D4		mva >pmg $d407
    99
   100 143F A0 00			ldy #0
   101 1441 A9 FF			lda #$ff
   102 1443 99 00 04		fpmg	sta pmg+$400,y
   103 1446 99 00 05			sta pmg+$500,y
   104 1449 99 00 06			sta pmg+$600,y
   105 144C 99 00 07			sta pmg+$700,y
   106 144F C8				iny
   107 1450 D0 F1			bne fpmg
   108
   109 1452 A9 74 8D 12 D0		mva #$74 colpm0
   110 1457 A9 A4 8D 13 D0		mva #$a4 colpm1
   111 145C A9 24 8D 14 D0		mva #$24 colpm2
   112 1461 A9 D4 8D 15 D0		mva #$d4 colpm3
   113
   114 1466 A9 03			lda #3
   115 1468 8D 08 D0			sta sizep0
   116 146B 8D 09 D0			sta sizep1
   117 146E 8D 0A D0			sta sizep2
   118 1471 8D 0B D0			sta sizep3
   119
   120 1474 A9 38 8D 00 D0 A9 + 	:4 mva #56+#*32 hposp0+#
   121
   122
   123 1488 A0 17			ldy #3*8-1
   124 148A A9 FF		chr	lda #$ff	;$d20a
   125 148C 99 08 C0			sta Charset0+8,y
   126 148F 99 08 C4			sta Charset1+8,y
   127 1492 99 08 C8			sta Charset2+8,y
   128 1495 99 08 CC			sta Charset3+8,y
   129 1498 99 08 E0			sta Charset4+8,y
   130 149B 99 08 E4			sta Charset5+8,y
   131 149E 99 08 E8			sta Charset6+8,y
   132 14A1 99 08 EC			sta Charset7+8,y
   133 14A4 99 08 F0			sta Charset8+8,y
   134 14A7 99 08 F4			sta Charset9+8,y
   135 14AA 99 08 F8			sta Charset10+8,y
   136 14AD 99 08 FC			sta Charset11+8,y
   137 14B0 88				dey
   138 14B1 10 D7			bpl chr
   139
   140 14B3 A9 21 8D FA FF A9 + 	mwa #nmi $fffa
   141
   142 14BD A9 C0 8D 0E D4		mva #$c0 $d40e
   143
   144
   145 14C2 A2 08			ldx #8
   146 14C4 A0 00			ldy #0
   147 14C6 A9 01		f0	lda #1
   148 14C8 99 00 D8		a0	sta PlayfieldBuf,y
   149 14CB C8				iny
   150 14CC A9 82			lda #2+$80
   151 14CE 99 00 D8		a1	sta PlayfieldBuf,y
   152 14D1 C8				iny
   153 14D2 A9 03			lda #3
   154 14D4 99 00 D8		a2	sta PlayfieldBuf,y
   155 14D7 C8				iny
   156 14D8 D0 EC			bne f0
   157 14DA EE CA 14			inc a0+2
   158 14DD EE D0 14			inc a1+2
   159 14E0 EE D6 14			inc a2+2
   160 14E3 CA				dex
   161 14E4 D0 E0			bne f0
   162
   163
   164 14E6 20 03 30			jsr Engine.reset
   165
   166 					.rept 6,#
   167 					MVA #64+:1*12 SPRITE:1.Y
   168 					MVA #33+#*32 SPRITE:1.X
   169 					STA SPRITE:1.NEW
   170 					.ENDR
   170 					.endr
Source: REPT
   167 14E9 A9 40 8D 01 29		MVA #64+0*12 SPRITE0.Y
   167 14EE A9 21 8D 00 29		MVA #33+#*32 SPRITE0.X
   167 14F3 8D 09 29			STA SPRITE0.NEW
   167 14F6 A9 4C 8D 0B 29		MVA #64+1*12 SPRITE1.Y
   167 14FB A9 41 8D 0A 29		MVA #33+#*32 SPRITE1.X
   167 1500 8D 13 29			STA SPRITE1.NEW
   167 1503 A9 58 8D 15 29		MVA #64+2*12 SPRITE2.Y
   167 1508 A9 61 8D 14 29		MVA #33+#*32 SPRITE2.X
   167 150D 8D 1D 29			STA SPRITE2.NEW
   167 1510 A9 64 8D 1F 29		MVA #64+3*12 SPRITE3.Y
   167 1515 A9 81 8D 1E 29		MVA #33+#*32 SPRITE3.X
   167 151A 8D 27 29			STA SPRITE3.NEW
   167 151D A9 70 8D 29 29		MVA #64+4*12 SPRITE4.Y
   167 1522 A9 A1 8D 28 29		MVA #33+#*32 SPRITE4.X
   167 1527 8D 31 29			STA SPRITE4.NEW
   167 152A A9 7C 8D 33 29		MVA #64+5*12 SPRITE5.Y
   167 152F A9 C1 8D 32 29		MVA #33+#*32 SPRITE5.X
   167 1534 8D 3B 29			STA SPRITE5.NEW
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   171
   172 1537 A9 EB 8D 05 29 A9 + 	mwa #spr0 Sprite0.bitmaps
   173 1541 A9 EB 8D 23 29 A9 + 	mwa #spr0 Sprite3.bitmaps
   174
   175 154B A9 05 8D 0F 29 A9 + 	mwa #spr1 Sprite1.bitmaps
   176 1555 A9 05 8D 2D 29 A9 + 	mwa #spr1 Sprite4.bitmaps
   177
   178 155F A9 0F 8D 19 29 A9 + 	mwa #spr2 Sprite2.bitmaps
   179 1569 A9 0F 8D 37 29 A9 + 	mwa #spr2 Sprite5.bitmaps
   180
   181 1573 AD 0F D2		loop	lda $d20f
   182 1576 29 04			and #4
   183 1578 F0 F9			beq loop
   184
   185 157A AD 18 14 CD 18 14 + 	lda:cmp:req cloc
   186 1582 A9 00 8D 18 14		mva #0 cloc
   187
   188 1587 20 94 29			jsr Engine
   189
   190 158A AD 18 14 8D 00 01		mva cloc $100
   191 1590 AD 0B D4 8D 01 01		mva $d40b $101
   192
   193 					.rept 6,#
   194 					LDA SPRITE:1.X
   195 					ADD #1
   196 					STA SPRITE:1.X
   198 					IFT #<>5&&#<>3&&#<>1
   199 					LDA SPRITE:1.Y
   200 					ADD #2
   201 					STA SPRITE:1.Y
   202 					EIF
   203 					.ENDR
   203 					.endr
Source: REPT
   194 1596 AD 00 29			LDA SPRITE0.X
   194 1599 18 69 01			ADD #1
   194 159C 8D 00 29			STA SPRITE0.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 159F AD 01 29			LDA SPRITE0.Y
   194 15A2 18 69 02			ADD #2
   194 15A5 8D 01 29			STA SPRITE0.Y
   194 					EIF
   194 15A8 AD 0A 29			LDA SPRITE1.X
   194 15AB 18 69 01			ADD #1
   194 15AE 8D 0A 29			STA SPRITE1.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 					LDA SPRITE1.Y
   194 					ADD #2
   194 					STA SPRITE1.Y
   194 					EIF
   194 15B1 AD 14 29			LDA SPRITE2.X
   194 15B4 18 69 01			ADD #1
   194 15B7 8D 14 29			STA SPRITE2.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 15BA AD 15 29			LDA SPRITE2.Y
   194 15BD 18 69 02			ADD #2
   194 15C0 8D 15 29			STA SPRITE2.Y
   194 					EIF
   194 15C3 AD 1E 29			LDA SPRITE3.X
   194 15C6 18 69 01			ADD #1
   194 15C9 8D 1E 29			STA SPRITE3.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 					LDA SPRITE3.Y
   194 					ADD #2
   194 					STA SPRITE3.Y
   194 					EIF
   194 15CC AD 28 29			LDA SPRITE4.X
   194 15CF 18 69 01			ADD #1
   194 15D2 8D 28 29			STA SPRITE4.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 15D5 AD 29 29			LDA SPRITE4.Y
   194 15D8 18 69 02			ADD #2
   194 15DB 8D 29 29			STA SPRITE4.Y
   194 					EIF
   194 15DE AD 32 29			LDA SPRITE5.X
   194 15E1 18 69 01			ADD #1
   194 15E4 8D 32 29			STA SPRITE5.X
   194 					IFT #<>5&&#<>3&&#<>1
   194 					LDA SPRITE5.Y
   194 					ADD #2
   194 					STA SPRITE5.Y
   194 					EIF
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   204
   205 15E7 4C 73 15			jmp loop
   206
   207
   208 15EA			Playfield_Update
   209 15EA 60				rts
   210
   211 15EB 00 17 40 17 80 17 + spr0	.word s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
   212 1603 00 00			dta a(0)
   213
   214 1605 00 1A 40 1A 80 1A + spr1	.word m0,m1,m2,m1
   215 160D 00 00			dta a(0)
   216
   217 160F C0 1A 00 1B 40 1B + spr2	.word b0,b1,b2,b3,b4,b5,b6,b7
   218 161F 00 00			dta a(0)
   219
   220
   221 				//---------------------------------------------------------------------
   222
   223 1621			.local	NMI
   224 1621 2C 0F D4			bit $d40f
   225 1624 10 34			bpl vbl
   226
   227 1626 85 A4		DLI	sta regA		; DLI
   228 1628 86 A5			stx regX
   229 162A 84 A6			sty regY
   230
   231 162C AD 04 11		iCh	lda Charsets
   232 162F AE 00 12		iC1	ldx tColor1
   233 1632 AC 00 13		iC2	ldy tColor2
   234 1635 8D 0A D4			sta $d40a
   235
   236 1638 8D 09 D4			sta chbase
   237 163B 8E 17 D0			stx color1
   238 163E 8C 18 D0			sty color2
   239
   240 1641 AD 00 14		iC3	lda tColor3
   241 1644 8D 19 D0			sta color3
   242
   243 1647 EE 2D 16			inc iCh+1
   244 164A EE 30 16			inc iC1+1
   245 164D EE 33 16			inc iC2+1
   246 1650 EE 42 16			inc iC3+1
   247
   248 1653 A5 A4			lda regA
   249 1655 A6 A5			ldx regX
   250 1657 A4 A6			ldy regY
   251 1659 40				rti	
   252
   253 165A 48 8A 48 98 48	vbl	phr
   254 165F 8D 0F D4			sta $d40f
   255
   256 1662 EE 18 14			inc cloc
   257
   258 1665 AD 19 14 8D 02 D4 + 	mwa dlist dlptr
   259
   260 					ift PlayfieldWidth=40
   261 					lda #scr32
   262 					eli PlayfieldWidth=48
   263 1671 A9 3E			lda #scr40
   264 					els
   265 					ert 1=1
   266 					eif
   267
   268 1673 8D 00 D4			sta $d400
   269
   270 1676 A9 04 8D 1B D0		mva #4 gtictl
   271
   272 167B A9 06 8D 1A D0	cBak	mva #$06 colbak
   273 1680 A9 0A 8D 16 D0	c0	mva #$0a color0
   274
   275 1685 A9 04 8D 2D 16 A9 + 	mwa #Charsets iCh+1
   276 168F AD 1B 14 8D 30 16 + 	mwa tColor1Addr iC1+1
   277 169B AD 1D 14 8D 33 16 + 	mwa tColor2Addr iC2+1
   278 16A7 AD 1F 14 8D 42 16 + 	mwa tColor3Addr iC3+1
   279
   280 16B3 68 A8 68 AA 68		plr
   281 16B8 40				rti
   282 				.endl
   283
   284 				//---------------------------------------------------------------------
   285
   286 16B9				.align
   287 				; klatka z duchem zajmuje 64 bajty, !!! wyrownujemy do poczatku strony pamieci !!!
   288
   289 1700				.get 'krakout_sprites.mic'
   290
   291 1700			s0	@@CutMIC 0 0 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   292 1740			s1	@@CutMIC 0 3 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   293 1780			s2	@@CutMIC 0 6 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   294 17C0			s3	@@CutMIC 0 9 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   295 1800			s4	@@CutMIC 0 12 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   296 1840			s5	@@CutMIC 0 15 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   297 1880			s6	@@CutMIC 0 18 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   298 18C0			s7	@@CutMIC 0 21 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   299 1900			s8	@@CutMIC 0 24 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   300 1940			s9	@@CutMIC 6 0 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   301 1980			s10	@@CutMIC 6 3 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   302 19C0			s11	@@CutMIC 6 6 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   303
   304 1A00			m0	@@CutMIC 6 21 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   305 1A40			m1	@@CutMIC 6 24 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   306 1A80			m2	@@CutMIC 6 27 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   307
   308 1AC0			b0	@@CutMIC 27 0 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   309 1B00			b1	@@CutMIC 27 3 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   310 1B40			b2	@@CutMIC 27 6 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   311 1B80			b3	@@CutMIC 27 9 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   312 1BC0			b4	@@CutMIC 27 12 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   313 1C00			b5	@@CutMIC 27 15 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   314 1C40			b6	@@CutMIC 27 18 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   315 1C80			b7	@@CutMIC 27 21 3 21
Macro: @@CUTMIC [Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm]
    12 					opt l+
Source: D:\!Delphi\mads\examples\sprites\chars_ng\CharEngine_1xBuf_EXAMPLE.asm
   316
   317
   318 1CC0				.align
   319 				; !!! koniecznie od pocz¹tku strony pamiêci !!!
   320
   321 1D00			EngineProgram
   322 					
   323 1D00-3737> 00 00 00 00 + 	.link 'CharEngine_1xBuf\CharEngine_1xBuf.obx'	
   324
   325
   326 				//---------------------------------------------------------------------
   327 				//---------------------------------------------------------------------
   328
   329
   330 				.macro	@@CutMIC
   331 					opt l-
   332 					.def ?x = :1
   333 					.def ?y = :2*320
   334 				
   335 					.def ?dst = $4000
   336 				
   337 					@@CopyLine
   338 					@@CopyLine
   339 					@@CopyLine
   340 				
   341 					.sav [$4000] 64
   342 					opt l+
   343 				.endm
   344
   345
   346 				.macro	@@CopyLine
   347 					:+21 .put[?dst+#]=.get[?x+?y+#*40]
   348 					
   349 					.def ?x++
   350 					.def ?dst+=21
   351 				.endm
   352
   353
   354 					.print *
   354 				$3738
   355
   356 02E0-02E1> 21 14			run main
